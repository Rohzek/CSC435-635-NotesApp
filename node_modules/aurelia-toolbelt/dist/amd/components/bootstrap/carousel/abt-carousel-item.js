var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define(["require", "exports", "./../../../utilities/vanilla/sharedIndex", "aurelia-framework"], function (require, exports, sharedIndex_1, aurelia_framework_1) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var CarouselItemCustomElement = (function () {
        function CarouselItemCustomElement(element, sharedController) {
            this.element = element;
            this.sharedController = sharedController;
            this.active = false;
            this.isActive = false;
            this.times = 0;
        }
        CarouselItemCustomElement.prototype.createIndicatorHtml = function (id, index, beActive) {
            return "<li style=\"cursor:pointer\" data-target=\"#" + id + "\" data-slide-to=\"" + index + "\" class=\"" + (beActive ? 'active' : '') + "\" ></li>";
        };
        CarouselItemCustomElement.prototype.afterAttached = function () {
            var carousel = this.carouselItem.parentElement.parentElement;
            this.times = this.sharedController.getAndIncrement(carousel.id);
            var isActive = (this.active === '' && this.carouselItemTemplate.hasAttribute('active')) || this.active.toString() === 'true';
            var carouselOl = carousel.children[0];
            var isOl = carouselOl.nodeName.toLowerCase() === 'ol';
            if (isOl) {
                carouselOl.innerHTML += this.createIndicatorHtml(carousel.id, this.times, isActive);
            }
            if (isActive) {
                this.carouselItem.classList.add('active');
            }
        };
        __decorate([
            aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneWay }),
            __metadata("design:type", Object)
        ], CarouselItemCustomElement.prototype, "active", void 0);
        CarouselItemCustomElement = __decorate([
            aurelia_framework_1.inject(Element, sharedIndex_1.SharedIndex),
            aurelia_framework_1.containerless(),
            aurelia_framework_1.customElement('abt-carousel-item'),
            __metadata("design:paramtypes", [Element, sharedIndex_1.SharedIndex])
        ], CarouselItemCustomElement);
        return CarouselItemCustomElement;
    }());
    exports.CarouselItemCustomElement = CarouselItemCustomElement;
});
