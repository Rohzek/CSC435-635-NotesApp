var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var aurelia_framework_1 = require("aurelia-framework");
var BootstrapCollapse = (function () {
    function BootstrapCollapse(element) {
        this.element = element;
        this.class = '';
        this.style = '';
    }
    BootstrapCollapse.prototype.setControllerProperties = function (ctrl) {
        var isString = typeof ctrl === 'string';
        var controller;
        if (isString) {
            controller = document.getElementById(ctrl);
        }
        else {
            controller = ctrl;
        }
        var id = this.collapse.id;
        controller.setAttribute('data-toggle', 'collapse');
        controller.setAttribute('aria-expanded', 'false');
        var prevAriaControls = (controller.getAttribute('aria-controls') || '').trim();
        if (controller.nodeName.toUpperCase() === 'A') {
            controller.onclick = function (event) {
                event.preventDefault();
                return false;
            };
            controller.setAttribute('href', "#" + id);
            controller.setAttribute('role', "button");
        }
        controller.setAttribute('data-target', prevAriaControls ? '.abt-collapse-multiple' : "#" + id);
        if (prevAriaControls) {
            if (prevAriaControls.trim().split(' ').length === 1) {
                document.getElementById("" + prevAriaControls).classList.add('abt-collapse-multiple');
            }
            this.collapse.classList.add('abt-collapse-multiple');
        }
        controller.setAttribute('aria-controls', id + " " + prevAriaControls);
    };
    BootstrapCollapse.prototype.setEvents = function () {
        var _this = this;
        if (this.bsShow) {
            $(this.collapse).on('show.bs.collapse', function () {
                if (_this.bsShow) {
                    _this.bsShow();
                }
            });
        }
        if (this.bsShown) {
            $(this.collapse).on('shown.bs.collapse', function () {
                if (_this.bsShown) {
                    _this.bsShown();
                }
            });
        }
        if (this.bsHide) {
            $(this.collapse).on('hide.bs.collapse', function () {
                if (_this.bsHide) {
                    _this.bsHide();
                }
            });
        }
        if (this.bsHidden) {
            $(this.collapse).on('hidden.bs.collapse', function () {
                if (_this.bsHidden) {
                    _this.bsHidden();
                }
            });
        }
    };
    BootstrapCollapse.prototype.afterAttached = function () {
        this.setEvents();
        if (this.collapse.parentElement.parentElement.classList.contains('abt-accordion')) {
            this.collapse.setAttribute('data-parent', "#" + this.collapse.parentElement.parentElement.id);
        }
        if (this.controlledBy && !Array.isArray(this.controlledBy)) {
            this.setControllerProperties(this.controlledBy);
            return true;
        }
        else if (this.controlledBy && Array.isArray(this.controlledBy)) {
            var counter = this.controlledBy.length;
            while (counter--) {
                var controller = this.controlledBy[counter];
                this.setControllerProperties(controller);
            }
        }
        return true;
    };
    BootstrapCollapse.prototype.detached = function () {
        $(this.collapse).off('show.bs.collapse');
        $(this.collapse).off('shown.bs.collapse');
        $(this.collapse).off('hide.bs.collapse');
        $(this.collapse).off('hidden.bs.collapse');
        $(this.collapse).collapse('dispose');
    };
    __decorate([
        aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime }),
        __metadata("design:type", Array)
    ], BootstrapCollapse.prototype, "controlledBy", void 0);
    __decorate([
        aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneWay }),
        __metadata("design:type", String)
    ], BootstrapCollapse.prototype, "class", void 0);
    __decorate([
        aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneWay }),
        __metadata("design:type", String)
    ], BootstrapCollapse.prototype, "style", void 0);
    __decorate([
        aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),
        __metadata("design:type", Function)
    ], BootstrapCollapse.prototype, "bsShow", void 0);
    __decorate([
        aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),
        __metadata("design:type", Function)
    ], BootstrapCollapse.prototype, "bsShown", void 0);
    __decorate([
        aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),
        __metadata("design:type", Function)
    ], BootstrapCollapse.prototype, "bsHide", void 0);
    __decorate([
        aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),
        __metadata("design:type", Function)
    ], BootstrapCollapse.prototype, "bsHidden", void 0);
    BootstrapCollapse = __decorate([
        aurelia_framework_1.inject(Element),
        aurelia_framework_1.containerless(),
        aurelia_framework_1.customElement('abt-collapse'),
        __metadata("design:paramtypes", [Element])
    ], BootstrapCollapse);
    return BootstrapCollapse;
}());
exports.BootstrapCollapse = BootstrapCollapse;
