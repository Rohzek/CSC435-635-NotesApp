System.register(["aurelia-framework"], function (exports_1, context_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var aurelia_framework_1, BootstrapTypographyService;
    return {
        setters: [
            function (aurelia_framework_1_1) {
                aurelia_framework_1 = aurelia_framework_1_1;
            }
        ],
        execute: function () {
            BootstrapTypographyService = (function () {
                function BootstrapTypographyService() {
                    this.update();
                }
                BootstrapTypographyService.prototype.update = function () {
                    var bodyStyles = window.getComputedStyle(document.body);
                    this.blue = bodyStyles.getPropertyValue('--blue');
                    this.indigo = bodyStyles.getPropertyValue('--indigo');
                    this.purple = bodyStyles.getPropertyValue('--purple');
                    this.pink = bodyStyles.getPropertyValue('--pink');
                    this.red = bodyStyles.getPropertyValue('--red');
                    this.orange = bodyStyles.getPropertyValue('--orange');
                    this.yellow = bodyStyles.getPropertyValue('--yellow');
                    this.green = bodyStyles.getPropertyValue('--green');
                    this.teal = bodyStyles.getPropertyValue('--teal');
                    this.cyan = bodyStyles.getPropertyValue('--cyan');
                    this.white = bodyStyles.getPropertyValue('--white');
                    this.gray = bodyStyles.getPropertyValue('--gray');
                    this.grayDark = bodyStyles.getPropertyValue('--gray-dark');
                    this.primary = bodyStyles.getPropertyValue('--primary');
                    this.secondary = bodyStyles.getPropertyValue('--secondary');
                    this.success = bodyStyles.getPropertyValue('--success');
                    this.info = bodyStyles.getPropertyValue('--info');
                    this.warning = bodyStyles.getPropertyValue('--warning');
                    this.danger = bodyStyles.getPropertyValue('--danger');
                    this.light = bodyStyles.getPropertyValue('--light');
                    this.dark = bodyStyles.getPropertyValue('--dark');
                    this.muted = bodyStyles.getPropertyValue('--gray');
                    this.breakpointXs = bodyStyles.getPropertyValue('--breakpoint-xs');
                    this.breakpointSm = bodyStyles.getPropertyValue('--breakpoint-sm');
                    this.breakpointMd = bodyStyles.getPropertyValue('--breakpoint-md');
                    this.breakpointLg = bodyStyles.getPropertyValue('--breakpoint-lg');
                    this.breakpointXl = bodyStyles.getPropertyValue('--breakpoint-xl');
                    this.fontFamilySansSerif = bodyStyles.getPropertyValue('--font-family-sans-serif');
                    this.fontFamilyMonospace = bodyStyles.getPropertyValue('--font-family-monospace');
                };
                BootstrapTypographyService = __decorate([
                    aurelia_framework_1.singleton(),
                    __metadata("design:paramtypes", [])
                ], BootstrapTypographyService);
                return BootstrapTypographyService;
            }());
            exports_1("BootstrapTypographyService", BootstrapTypographyService);
        }
    };
});
