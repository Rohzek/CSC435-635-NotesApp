System.register(["aurelia-framework", "jquery", "aureliatoolbelt-thirdparty/bootstrap-toggle/bootstrap-toggle.js"], function (exports_1, context_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var aurelia_framework_1, $, BootstrapToggleCustomElement;
    return {
        setters: [
            function (aurelia_framework_1_1) {
                aurelia_framework_1 = aurelia_framework_1_1;
            },
            function ($_1) {
                $ = $_1;
            },
            function (_1) {
            }
        ],
        execute: function () {
            BootstrapToggleCustomElement = (function () {
                function BootstrapToggleCustomElement(element, bindingEngine) {
                    this.element = element;
                    this.bindingEngine = bindingEngine;
                    this.on = 'On';
                    this.off = 'Off';
                    this.onType = 'primary';
                    this.offType = 'secondary';
                    this.css = '';
                    this.size = 'normal';
                    this.width = null;
                    this.height = null;
                    this.class = '';
                    this.style = '';
                    this.disabled = false;
                    this.rtl = false;
                    this.subscription = null;
                }
                BootstrapToggleCustomElement.prototype.disabledChanged = function (newValue) {
                    if (newValue) {
                        this.checkbox.setAttribute('disabled', 'disabled');
                    }
                    else {
                        if (this.checkbox.hasAttribute('disabled')) {
                            this.checkbox.removeAttribute('disabled');
                        }
                    }
                };
                BootstrapToggleCustomElement.prototype.onChanged = function () {
                    if (this.disabled) {
                        return;
                    }
                    var newValue = this.element.children.item(0).children.item(0).classList.contains('off');
                    this.synchronizeModel(!newValue);
                };
                BootstrapToggleCustomElement.prototype.synchronizeModel = function (newState) {
                    var _this = this;
                    if (!Array.isArray(this.checked)) {
                        this.checked = newState;
                        return;
                    }
                    if (newState && ((this.matcher && this.checked.findIndex(function (x) { return _this.matcher(x, _this.value || _this.model); }) === -1)
                        ||
                            (this.checked.indexOf(this.value || this.model) === -1))) {
                        this.checked.push(this.value || this.model);
                    }
                    else if (!newState) {
                        var index = this.matcher
                            ? this.checked.findIndex(function (x) { return _this.matcher(x, _this.value || _this.model); })
                            : this.checked.indexOf(this.value || this.model);
                        if (index !== -1) {
                            this.checked.splice(index, 1);
                        }
                    }
                };
                BootstrapToggleCustomElement.prototype.checkedChanged = function (newValue) {
                    var _this = this;
                    this.disposeSubscription();
                    if (Array.isArray(this.checked)) {
                        this.subscription = this.bindingEngine.collectionObserver(this.checked)
                            .subscribe(function () {
                            _this.synchronizeView(newValue);
                        });
                    }
                    this.synchronizeView(newValue);
                };
                BootstrapToggleCustomElement.prototype.synchronizeView = function (newValue) {
                    var _this = this;
                    var state = newValue;
                    if (Array.isArray(this.checked)) {
                        var index = this.matcher
                            ? this.checked.findIndex(function (x) { return _this.matcher(x, _this.value || _this.model); })
                            : this.checked.indexOf(this.value || this.model);
                        state = index !== -1;
                    }
                    if (state) {
                        $(this.checkbox).prop('checked', true).change();
                    }
                    else {
                        $(this.checkbox).prop('checked', false).change();
                    }
                };
                BootstrapToggleCustomElement.prototype.attached = function () {
                    $(this.checkbox).bootstrapToggle({
                        on: this.on,
                        off: this.off,
                        size: this.size,
                        onstyle: this.onType,
                        offstyle: this.offType,
                        width: this.width,
                        height: this.height
                    });
                };
                BootstrapToggleCustomElement.prototype.bind = function () {
                    this.disabled = (this.disabled === '' && this.element.hasAttribute('disabled')) || (this.disabled && this.disabled.toString() === 'true');
                    if (!Array.isArray(this.checked)) {
                        this.checked = (this.checked === '' && this.element.hasAttribute('checked')) || (this.checked && this.checked.toString() === 'true');
                    }
                    this.disabledChanged(this.disabled);
                    this.synchronizeView(this.checked);
                };
                BootstrapToggleCustomElement.prototype.unbind = function () {
                    this.disposeSubscription();
                };
                BootstrapToggleCustomElement.prototype.disposeSubscription = function () {
                    if (this.subscription !== null) {
                        this.subscription.dispose();
                        this.subscription = null;
                    }
                };
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime }),
                    __metadata("design:type", String)
                ], BootstrapToggleCustomElement.prototype, "on", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime }),
                    __metadata("design:type", String)
                ], BootstrapToggleCustomElement.prototype, "off", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime }),
                    __metadata("design:type", String)
                ], BootstrapToggleCustomElement.prototype, "onType", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime }),
                    __metadata("design:type", String)
                ], BootstrapToggleCustomElement.prototype, "offType", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime }),
                    __metadata("design:type", String)
                ], BootstrapToggleCustomElement.prototype, "css", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime }),
                    __metadata("design:type", String)
                ], BootstrapToggleCustomElement.prototype, "size", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime }),
                    __metadata("design:type", Number)
                ], BootstrapToggleCustomElement.prototype, "width", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneTime }),
                    __metadata("design:type", Number)
                ], BootstrapToggleCustomElement.prototype, "height", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneWay }),
                    __metadata("design:type", String)
                ], BootstrapToggleCustomElement.prototype, "class", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneWay }),
                    __metadata("design:type", String)
                ], BootstrapToggleCustomElement.prototype, "style", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),
                    __metadata("design:type", Object)
                ], BootstrapToggleCustomElement.prototype, "value", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),
                    __metadata("design:type", Object)
                ], BootstrapToggleCustomElement.prototype, "model", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),
                    __metadata("design:type", Object)
                ], BootstrapToggleCustomElement.prototype, "checked", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),
                    __metadata("design:type", Function)
                ], BootstrapToggleCustomElement.prototype, "matcher", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),
                    __metadata("design:type", Object)
                ], BootstrapToggleCustomElement.prototype, "disabled", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),
                    __metadata("design:type", Object)
                ], BootstrapToggleCustomElement.prototype, "rtl", void 0);
                BootstrapToggleCustomElement = __decorate([
                    aurelia_framework_1.inject(Element, aurelia_framework_1.BindingEngine),
                    aurelia_framework_1.customElement('abt-toggle'),
                    __metadata("design:paramtypes", [Element, aurelia_framework_1.BindingEngine])
                ], BootstrapToggleCustomElement);
                return BootstrapToggleCustomElement;
            }());
            exports_1("BootstrapToggleCustomElement", BootstrapToggleCustomElement);
        }
    };
});
