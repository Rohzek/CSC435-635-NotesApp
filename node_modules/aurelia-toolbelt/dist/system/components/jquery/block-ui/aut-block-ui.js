System.register(["./SharedOptions", "./../../../utilities/vanilla/jsTools", "aurelia-framework", "jquery", "aureliatoolbelt-thirdparty/jquery.blockUI/jquery.blockUI.js"], function (exports_1, context_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __moduleName = context_1 && context_1.id;
    var SharedOptions_1, jsTools_1, aurelia_framework_1, $, JQueryBlockUI;
    return {
        setters: [
            function (SharedOptions_1_1) {
                SharedOptions_1 = SharedOptions_1_1;
            },
            function (jsTools_1_1) {
                jsTools_1 = jsTools_1_1;
            },
            function (aurelia_framework_1_1) {
                aurelia_framework_1 = aurelia_framework_1_1;
            },
            function ($_1) {
                $ = $_1;
            },
            function (_1) {
            }
        ],
        execute: function () {
            JQueryBlockUI = (function () {
                function JQueryBlockUI(element, option, jsTools, sharedOptions) {
                    this.element = element;
                    this.option = option;
                    this.jsTools = jsTools;
                    this.sharedOptions = sharedOptions;
                    this.settings = null;
                    this.block = false;
                    this.blockPage = false;
                    this.spinnerMessage = null;
                    this.defaultOption = {};
                    this.allOptions = {};
                    this.id = '';
                }
                JQueryBlockUI.prototype.hasContent = function () {
                    var slot = this.content.innerHTML.replace('<!--slot-->', '').trim();
                    if (slot.length > 0) {
                        return true;
                    }
                    return false;
                };
                JQueryBlockUI.prototype.afterAttached = function () {
                    this.id = this.content.id;
                    this.elementId = "#" + this.id;
                    if (this.blockPage && this.hasContent()) {
                        throw Error('You can not use the [aut-block-ui] with [block-page] property, while you have defined a content inside it.');
                    }
                    this.setDefaultOption();
                    this.defaultOption.blockMsgClass += " m" + this.id;
                    this.sharedOptions.setOption(this.id, {
                        id: this.id,
                        settings: this.settings || {},
                        option: this.option || {},
                        default: this.defaultOption
                    });
                    this.blockChanged(this.block);
                    this.blockPageChanged(this.blockPage);
                };
                JQueryBlockUI.prototype.setDefaultOption = function () {
                    this.defaultOption.allowBodyStretch = true;
                    this.defaultOption.css = {
                        padding: '0',
                        margin: '0',
                        width: '30%',
                        top: '45%',
                        left: '35%',
                        textAlign: 'center',
                        color: '#000',
                        border: '3px solid #aaa',
                        backgroundColor: '#fff',
                        cursor: 'wait'
                    };
                    this.defaultOption.overlayCss = {
                        backgroundColor: '#000',
                        opacity: 0.6,
                        cursor: 'wait'
                    };
                    this.defaultOption.cursorReset = 'default';
                    this.defaultOption.iframeSrc = (/^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank');
                    this.defaultOption.forceIframe = false;
                    this.defaultOption.baseZ = 1020;
                    this.defaultOption.centerX = true;
                    this.defaultOption.centerY = true;
                    this.defaultOption.bindEvents = true;
                    this.defaultOption.constrainTabKey = true;
                    this.defaultOption.fadeIn = 200;
                    this.defaultOption.fadeOut = 400;
                    this.defaultOption.timeout = 0;
                    this.defaultOption.showOverlay = true;
                    this.defaultOption.focusInput = true;
                    this.defaultOption.quirksmodeOffsetHack = 4;
                    this.defaultOption.blockMsgClass = 'blockMsg';
                    this.defaultOption.ignoreIfBlocked = false;
                    this.defaultOption.message = '<h1>Please wait...</h1>';
                    this.defaultOption.useSpinner = true;
                };
                JQueryBlockUI.prototype.setSpinnerStyle = function (id, option) {
                    var unit = this.getSizeUnit(option.spinnerSize);
                    var size = this.getSize(option.spinnerSize);
                    var bsVariant = ['.primary', '.secondary', '.success', '.danger', '.warning', '.info', '.light', '.dark'];
                    var isClass = false;
                    var spinnerBgColor = '';
                    if (option.spinnerColor) {
                        isClass = option.spinnerColor.indexOf('.') > -1;
                        if (isClass) {
                            if (bsVariant.indexOf(option.spinnerColor) > -1) {
                                spinnerBgColor = 'bg-' + option.spinnerColor.replace('.', '');
                            }
                            else {
                                spinnerBgColor = option.spinnerColor.replace('.', '');
                            }
                        }
                        else {
                            spinnerBgColor = "background-color: " + (option.spinnerColor || '#92459B') + " !important";
                        }
                    }
                    else {
                        spinnerBgColor = 'bg-primary';
                        isClass = true;
                    }
                    var style = "\n    .blockElement." + ('m' + id) + "{\n      z-index: " + option.baseZ + " !important;\n    }\n    .blockPage." + ('m' + id) + "{\n      z-index: " + option.baseZ + " !important;\n    }\n    ." + ('b' + id) + " {\n      width: " + size + unit + " !important;\n      height: " + size + unit + " !important;\n      " + (!isClass ? spinnerBgColor : '') + "\n    }";
                    aurelia_framework_1.DOM.injectStyles(style, null, null, 's' + id);
                    this.spinnerMessage = "<div class=\"bounce\"><div class=\"bounce1 " + (isClass ? spinnerBgColor : '') + " " + ('b' + id) + "\"></div><div class=\"bounce2 " + (isClass ? spinnerBgColor : '') + " " + ('b' + id) + "\"></div><div class=\"bounce3 " + (isClass ? spinnerBgColor : '') + " " + ('b' + id) + "\"></div></div>";
                };
                JQueryBlockUI.prototype.blockChanged = function (isBlocked) {
                    var _this = this;
                    var option;
                    var merged = this.sharedOptions.getOption(this.id);
                    if (merged) {
                        option = Object.assign({}, merged.default, merged.option, merged.settings);
                    }
                    if (!this.jsTools.isEmpty(option) && option.useSpinner) {
                        this.setSpinnerStyle(this.id, option);
                        option.css = {
                            border: 'none',
                            backgroundColor: 'transparent'
                        };
                        option.message = this.spinnerMessage;
                        option.overlayCSS = {
                            backgroundColor: '#EEEEEE'
                        };
                    }
                    if (isBlocked) {
                        $(this.elementId).block(option);
                        this.element.classList.add('aut-block-ui-content');
                        $(window).resize(function () {
                            if (_this.element.classList.contains('aut-block-ui-content')) {
                                $(_this.elementId).block(option);
                            }
                        });
                    }
                    else {
                        $(this.elementId).unblock();
                        this.element.classList.remove('aut-block-ui-content');
                    }
                };
                JQueryBlockUI.prototype.blockPageChanged = function (isBlocked) {
                    if (this.blockPage && this.hasContent()) {
                        throw Error('You can not use the [aut-block-ui] with [block-page] property, while you have defined a content inside it.');
                    }
                    var option;
                    var merged = this.sharedOptions.getOption(this.id);
                    if (merged) {
                        option = Object.assign({}, merged.default, merged.option, merged.settings);
                    }
                    if (!this.jsTools.isEmpty(option) && option.useSpinner) {
                        this.setSpinnerStyle(this.id, option);
                        option.css = {
                            border: 'none',
                            backgroundColor: 'transparent'
                        };
                        option.message = this.spinnerMessage;
                        option.overlayCSS = {
                            backgroundColor: '#EEEEEE'
                        };
                    }
                    if (isBlocked) {
                        $.blockUI(option);
                    }
                    else {
                        $.unblockUI();
                    }
                };
                JQueryBlockUI.prototype.getSizeUnit = function (text) {
                    if (!text) {
                        return 'px';
                    }
                    var unit = text.replace(/[0-9]/g, '').replace('.', '');
                    if (unit === '') {
                        unit = 'px';
                    }
                    return unit;
                };
                JQueryBlockUI.prototype.getSize = function (text) {
                    if (!text) {
                        return 12;
                    }
                    var unit = this.getSizeUnit(text);
                    var size = Number(text.replace(unit, '').trim());
                    return size;
                };
                JQueryBlockUI.prototype.detached = function () {
                    $.unblockUI();
                    $(this.content).unblock();
                    this.sharedOptions.dispose();
                };
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneWay }),
                    __metadata("design:type", Object)
                ], JQueryBlockUI.prototype, "settings", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),
                    __metadata("design:type", Object)
                ], JQueryBlockUI.prototype, "block", void 0);
                __decorate([
                    aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),
                    __metadata("design:type", Object)
                ], JQueryBlockUI.prototype, "blockPage", void 0);
                JQueryBlockUI = __decorate([
                    aurelia_framework_1.customElement('aut-block-ui'),
                    aurelia_framework_1.inject(Element, 'aut-block-ui-option', jsTools_1.JsTools, SharedOptions_1.SharedOptions),
                    __metadata("design:paramtypes", [Element, Object, jsTools_1.JsTools, SharedOptions_1.SharedOptions])
                ], JQueryBlockUI);
                return JQueryBlockUI;
            }());
            exports_1("JQueryBlockUI", JQueryBlockUI);
        }
    };
});
