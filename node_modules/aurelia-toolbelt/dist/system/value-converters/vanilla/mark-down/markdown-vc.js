System.register(["aurelia-framework"], function (exports_1, context_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __moduleName = context_1 && context_1.id;
    var aurelia_framework_1, MarkdownIt, hljs, MarkDownValueConverter;
    return {
        setters: [
            function (aurelia_framework_1_1) {
                aurelia_framework_1 = aurelia_framework_1_1;
            }
        ],
        execute: function () {
            MarkdownIt = require('markdown-it');
            hljs = require('highlight.js');
            MarkDownValueConverter = (function () {
                function MarkDownValueConverter() {
                }
                MarkDownValueConverter.prototype.toView = function (value) {
                    var md = new MarkdownIt({
                        useBR: true,
                        linkify: true,
                        highlight: function (str, lang) {
                            if (lang && hljs.getLanguage(lang)) {
                                try {
                                    return '<pre class="hljs"><code>' +
                                        hljs.highlight(lang, str, true).value +
                                        '</code></pre>';
                                }
                                catch (__) {
                                    console.warn(__);
                                }
                            }
                            return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
                        }
                    });
                    var result = md.render(value);
                    md = null;
                    return result;
                };
                MarkDownValueConverter = __decorate([
                    aurelia_framework_1.valueConverter('md')
                ], MarkDownValueConverter);
                return MarkDownValueConverter;
            }());
            exports_1("MarkDownValueConverter", MarkDownValueConverter);
        }
    };
});
